
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import exceptions.*;
import callgraph.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\012\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\007\004" +
    "\000\002\007\002\000\002\012\007\000\002\012\002\000" +
    "\002\010\004\000\002\010\002\000\002\013\007\000\002" +
    "\013\002\000\002\011\004\000\002\011\002\000\002\014" +
    "\007\000\002\014\002\000\002\005\007\000\002\005\002" +
    "\000\002\006\006\000\002\032\005\000\002\033\005\000" +
    "\002\033\004\000\002\033\002\000\002\037\005\000\002" +
    "\037\003\000\002\034\006\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\005\000\002\016\005\000\002\016\003\000" +
    "\002\017\005\000\002\017\002\000\002\015\003\000\002" +
    "\015\002\000\002\040\006\000\002\031\003\000\002\031" +
    "\005\000\002\020\003\000\002\020\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\002\000\002\022\007\000\002" +
    "\023\011\000\002\025\007\000\002\025\002\000\002\024" +
    "\004\000\002\024\002\000\002\030\006\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\006\000\002" +
    "\030\003\000\002\026\004\000\002\041\005\000\002\041" +
    "\004\000\002\043\003\000\002\043\005\000\002\027\006" +
    "\000\002\042\005\000\002\042\004\000\002\042\004\000" +
    "\002\042\005\000\002\042\004\000\002\042\004\000\002" +
    "\042\005\000\002\042\004\000\002\042\004\000\002\042" +
    "\005\000\002\042\004\000\002\042\004\000\002\042\005" +
    "\000\002\042\004\000\002\042\004\000\002\042\005\000" +
    "\002\042\004\000\002\042\004\000\002\042\003\000\002" +
    "\044\003\000\002\044\004\000\002\044\004\000\002\046" +
    "\005\000\002\046\004\000\002\046\005\000\002\046\004" +
    "\000\002\046\005\000\002\046\004\000\002\046\004\000" +
    "\002\046\003\000\002\045\003\000\002\045\005\000\002" +
    "\045\004\000\002\045\005\000\002\045\004\000\002\045" +
    "\005\000\002\045\004\000\002\045\005\000\002\045\004" +
    "\000\002\045\004\000\002\047\004\000\002\047\003\000" +
    "\002\047\005\000\002\047\004\000\002\050\005\000\002" +
    "\050\006\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\004\005\001\002\000\004\002\314\001" +
    "\002\000\004\060\006\001\002\000\004\055\007\001\002" +
    "\000\016\005\ufffb\006\ufffb\007\ufffb\021\ufffb\022\ufffb\024" +
    "\010\001\002\000\016\005\ufff9\006\ufff9\007\ufff9\021\ufff9" +
    "\022\ufff9\060\ufff9\001\002\000\006\006\173\007\ufffe\001" +
    "\002\000\014\005\ufff7\006\ufff7\007\ufff7\021\ufff7\022\014" +
    "\001\002\000\012\005\ufff3\006\ufff3\007\ufff3\021\156\001" +
    "\002\000\014\005\ufff5\006\ufff5\007\ufff5\021\ufff5\060\ufff5" +
    "\001\002\000\014\005\ufff8\006\ufff8\007\ufff8\021\ufff8\060" +
    "\016\001\002\000\004\036\017\001\002\000\014\017\021" +
    "\020\026\023\020\025\027\060\023\001\002\000\010\007" +
    "\uffdd\055\uffdd\060\144\001\002\000\010\007\uffe3\052\uffe3" +
    "\055\uffe3\001\002\000\004\055\141\001\002\000\010\007" +
    "\uffe6\052\uffe6\055\uffe6\001\002\000\010\007\uffe5\052\uffe5" +
    "\055\uffe5\001\002\000\010\007\uffe4\052\uffe4\055\uffe4\001" +
    "\002\000\010\007\uffe2\052\uffe2\055\uffe2\001\002\000\044" +
    "\031\034\032\054\033\030\034\050\035\031\036\036\037" +
    "\037\040\033\041\044\042\043\043\053\044\032\045\035" +
    "\046\040\051\042\060\041\061\046\001\002\000\012\046" +
    "\040\051\042\060\041\061\046\001\002\000\012\046\040" +
    "\051\042\060\041\061\046\001\002\000\012\046\040\051" +
    "\042\060\041\061\046\001\002\000\030\031\034\032\054" +
    "\033\030\034\050\035\031\044\032\045\035\046\040\051" +
    "\042\060\041\061\046\001\002\000\024\033\030\034\050" +
    "\035\031\044\032\045\035\046\040\051\042\060\041\061" +
    "\046\001\002\000\022\033\030\034\050\035\031\044\032" +
    "\046\040\051\042\060\041\061\046\001\002\000\030\031" +
    "\034\032\054\033\030\034\050\035\031\044\032\045\035" +
    "\046\040\051\042\060\041\061\046\001\002\000\030\031" +
    "\034\032\054\033\030\034\050\035\031\044\032\045\035" +
    "\046\040\051\042\060\041\061\046\001\002\000\012\046" +
    "\040\051\042\060\041\061\046\001\002\000\074\007\uff8c" +
    "\011\uff8c\012\uff8c\013\uff8c\015\uff8c\016\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\001\002\000\044\031\034\032\054\033" +
    "\030\034\050\035\031\036\036\037\037\040\033\041\044" +
    "\042\043\043\053\044\032\045\035\046\040\051\042\060" +
    "\041\061\046\001\002\000\030\031\034\032\054\033\030" +
    "\034\050\035\031\044\032\045\035\046\040\051\042\060" +
    "\041\061\046\001\002\000\030\031\034\032\054\033\030" +
    "\034\050\035\031\044\032\045\035\046\040\051\042\060" +
    "\041\061\046\001\002\000\004\016\114\001\002\000\070" +
    "\007\uff91\011\uff91\012\uff91\013\uff91\015\uff91\016\uff91\031" +
    "\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\051\uff91\052\uff91\054\uff91\055\uff91\056\uff91\060\uff91" +
    "\061\uff91\001\002\000\070\007\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\015\uff9c\016\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\051\uff9c\052\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\060\uff9c\061\uff9c\001\002\000\012\046" +
    "\040\051\042\060\041\061\046\001\002\000\070\007\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\015\uff9d\016\uff9d\031\uff9d\032" +
    "\uff9d\033\066\034\063\035\064\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\062\045\uff9d\046\040\051" +
    "\042\052\uff9d\054\uff9d\055\uff9d\056\uff9d\060\041\061\046" +
    "\001\002\000\042\007\uffa8\011\uffa8\012\uffa8\013\uffa8\015" +
    "\uffa8\016\uffa8\036\101\037\104\040\077\041\102\042\100" +
    "\043\103\052\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002\000" +
    "\030\031\034\032\054\033\030\034\050\035\031\044\032" +
    "\045\035\046\040\051\042\060\041\061\046\001\002\000" +
    "\024\033\030\034\050\035\031\044\032\045\035\046\040" +
    "\051\042\060\041\061\046\001\002\000\050\007\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\015\uffa7\016\uffa7\031\056\032\057" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\045" +
    "\060\052\uffa7\054\uffa7\055\uffa7\056\uffa7\001\002\000\070" +
    "\007\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3\031" +
    "\uffa3\032\uffa3\033\030\034\050\035\031\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\032\045\uffa3\046" +
    "\040\051\042\052\uffa3\054\uffa3\055\uffa3\056\uffa3\060\041" +
    "\061\046\001\002\000\070\007\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\015\uffa1\016\uffa1\031\uffa1\032\uffa1\033\030\034\050" +
    "\035\031\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\032\045\uffa1\046\040\051\042\052\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\060\041\061\046\001\002\000\070\007" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f\031\uff9f" +
    "\032\uff9f\033\030\034\050\035\031\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\032\045\uff9f\046\040" +
    "\051\042\052\uff9f\054\uff9f\055\uff9f\056\uff9f\060\041\061" +
    "\046\001\002\000\070\007\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\015\uffa0\016\uffa0\031\uffa0\032\uffa0\033\066\034\063\035" +
    "\064\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\062\045\uffa0\046\040\051\042\052\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\060\041\061\046\001\002\000\012\046\040" +
    "\051\042\060\041\061\046\001\002\000\012\046\040\051" +
    "\042\060\041\061\046\001\002\000\012\046\040\051\042" +
    "\060\041\061\046\001\002\000\070\007\uff93\011\uff93\012" +
    "\uff93\013\uff93\015\uff93\016\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\051\uff93\052\uff93" +
    "\054\uff93\055\uff93\056\uff93\060\uff93\061\uff93\001\002\000" +
    "\012\046\040\051\042\060\041\061\046\001\002\000\070" +
    "\007\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b\016\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\051\uff9b\052\uff9b\054\uff9b\055\uff9b\056\uff9b\060\uff9b" +
    "\061\uff9b\001\002\000\070\007\uff97\011\uff97\012\uff97\013" +
    "\uff97\015\uff97\016\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\051\uff97\052\uff97\054\uff97" +
    "\055\uff97\056\uff97\060\uff97\061\uff97\001\002\000\070\007" +
    "\uff99\011\uff99\012\uff99\013\uff99\015\uff99\016\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\051\uff99\052\uff99\054\uff99\055\uff99\056\uff99\060\uff99\061" +
    "\uff99\001\002\000\070\007\uff95\011\uff95\012\uff95\013\uff95" +
    "\015\uff95\016\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\051\uff95\052\uff95\054\uff95\055" +
    "\uff95\056\uff95\060\uff95\061\uff95\001\002\000\070\007\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\015\uffa2\016\uffa2\031\uffa2\032" +
    "\uffa2\033\066\034\063\035\064\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\062\045\uffa2\046\040\051" +
    "\042\052\uffa2\054\uffa2\055\uffa2\056\uffa2\060\041\061\046" +
    "\001\002\000\070\007\uffa4\011\uffa4\012\uffa4\013\uffa4\015" +
    "\uffa4\016\uffa4\031\uffa4\032\uffa4\033\066\034\063\035\064" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\062\045\uffa4\046\040\051\042\052\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\060\041\061\046\001\002\000\050\007\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\015\uffa5\016\uffa5\031\056\032\057" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\045" +
    "\060\052\uffa5\054\uffa5\055\uffa5\056\uffa5\001\002\000\026" +
    "\007\uffac\011\uffac\012\uffac\013\uffac\015\uffac\016\uffac\052" +
    "\uffac\054\uffac\055\uffac\056\uffac\001\002\000\054\007\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0\031\034\032" +
    "\054\033\030\034\050\035\031\044\032\045\035\046\040" +
    "\051\042\052\uffb0\054\uffb0\055\uffb0\056\uffb0\060\041\061" +
    "\046\001\002\000\054\007\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\015\uffaa\016\uffaa\031\034\032\054\033\030\034\050\035" +
    "\031\044\032\045\035\046\040\051\042\052\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\060\041\061\046\001\002\000\054\007" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\016\uffb9\031\034" +
    "\032\054\033\030\034\050\035\031\044\032\045\035\046" +
    "\040\051\042\052\uffb9\054\uffb9\055\uffb9\056\uffb9\060\041" +
    "\061\046\001\002\000\054\007\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\015\uffb3\016\uffb3\031\034\032\054\033\030\034\050" +
    "\035\031\044\032\045\035\046\040\051\042\052\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\060\041\061\046\001\002\000\054" +
    "\007\uffad\011\uffad\012\uffad\013\uffad\015\uffad\016\uffad\031" +
    "\034\032\054\033\030\034\050\035\031\044\032\045\035" +
    "\046\040\051\042\052\uffad\054\uffad\055\uffad\056\uffad\060" +
    "\041\061\046\001\002\000\054\007\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\015\uffb6\016\uffb6\031\034\032\054\033\030\034" +
    "\050\035\031\044\032\045\035\046\040\051\042\052\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\060\041\061\046\001\002\000" +
    "\026\007\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7" +
    "\052\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000\026\007" +
    "\uffae\011\uffae\012\uffae\013\uffae\015\uffae\016\uffae\052\uffae" +
    "\054\uffae\055\uffae\056\uffae\001\002\000\026\007\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\052\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\001\002\000\026\007\uffba\011\uffba\012" +
    "\uffba\013\uffba\015\uffba\016\uffba\052\uffba\054\uffba\055\uffba" +
    "\056\uffba\001\002\000\026\007\uffab\011\uffab\012\uffab\013" +
    "\uffab\015\uffab\016\uffab\052\uffab\054\uffab\055\uffab\056\uffab" +
    "\001\002\000\026\007\uffb1\011\uffb1\012\uffb1\013\uffb1\015" +
    "\uffb1\016\uffb1\052\uffb1\054\uffb1\055\uffb1\056\uffb1\001\002" +
    "\000\070\007\uff98\011\uff98\012\uff98\013\uff98\015\uff98\016" +
    "\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\051\uff98\052\uff98\054\uff98\055\uff98\056\uff98" +
    "\060\uff98\061\uff98\001\002\000\014\017\021\020\026\023" +
    "\020\025\027\060\023\001\002\000\010\007\uffda\052\uffda" +
    "\055\uffda\001\002\000\026\007\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\015\uffb2\016\uffb2\052\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\001\002\000\026\007\uffa9\011\uffa9\012\uffa9\013\uffa9\015" +
    "\uffa9\016\uffa9\052\uffa9\054\uffa9\055\uffa9\056\uffa9\001\002" +
    "\000\004\052\121\001\002\000\070\007\uff90\011\uff90\012" +
    "\uff90\013\uff90\015\uff90\016\uff90\031\uff90\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\045\uff90\046\uff90\051\uff90\052\uff90" +
    "\054\uff90\055\uff90\056\uff90\060\uff90\061\uff90\001\002\000" +
    "\074\007\uff92\011\uff92\012\uff92\013\uff92\015\uff92\016\uff92" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\046\uff92\051\uff92\052\uff92\053\123\054\uff92\055\uff92\056" +
    "\uff92\057\124\060\uff92\061\uff92\001\002\000\044\031\034" +
    "\032\054\033\030\034\050\035\031\036\036\037\037\040" +
    "\033\041\044\042\043\043\053\044\032\045\035\046\040" +
    "\051\042\060\041\061\046\001\002\000\004\060\125\001" +
    "\002\000\076\007\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e" +
    "\016\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\053\uff8e\054" +
    "\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\001\002" +
    "\000\004\054\127\001\002\000\076\007\uff8d\011\uff8d\012" +
    "\uff8d\013\uff8d\015\uff8d\016\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060" +
    "\uff8d\061\uff8d\001\002\000\070\007\uff8f\011\uff8f\012\uff8f" +
    "\013\uff8f\015\uff8f\016\uff8f\031\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\051\uff8f\052\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\060\uff8f\061\uff8f\001\002\000\026" +
    "\007\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5\052" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\001\002\000\026\007\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\052\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\001\002\000\070\007\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\015\uff9e\016\uff9e\031\uff9e\032\uff9e\033" +
    "\066\034\063\035\064\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\062\045\uff9e\046\040\051\042\052" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\060\041\061\046\001\002" +
    "\000\050\007\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016" +
    "\uffa6\031\056\032\057\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\045\060\052\uffa6\054\uffa6\055\uffa6\056" +
    "\uffa6\001\002\000\026\007\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\015\uffaf\016\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf\001" +
    "\002\000\070\007\uff94\011\uff94\012\uff94\013\uff94\015\uff94" +
    "\016\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\051\uff94\052\uff94\054\uff94\055\uff94\056" +
    "\uff94\060\uff94\061\uff94\001\002\000\070\007\uff96\011\uff96" +
    "\012\uff96\013\uff96\015\uff96\016\uff96\031\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\051\uff96\052" +
    "\uff96\054\uff96\055\uff96\056\uff96\060\uff96\061\uff96\001\002" +
    "\000\070\007\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a\016" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\051\uff9a\052\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\060\uff9a\061\uff9a\001\002\000\014\005\ufff6\006\ufff6\007" +
    "\ufff6\021\ufff6\060\ufff6\001\002\000\006\007\uffdf\055\uffdf" +
    "\001\002\000\006\050\152\056\151\001\002\000\006\050" +
    "\uffd9\056\uffd9\001\002\000\006\007\147\055\146\001\002" +
    "\000\010\007\uffdd\055\uffdd\060\144\001\002\000\010\007" +
    "\uffe1\052\uffe1\055\uffe1\001\002\000\006\007\uffe0\055\uffe0" +
    "\001\002\000\004\060\154\001\002\000\014\017\021\020" +
    "\026\023\020\025\027\060\023\001\002\000\006\007\uffde" +
    "\055\uffde\001\002\000\006\050\uffd8\056\uffd8\001\002\000" +
    "\010\005\uffef\006\uffef\007\uffef\001\002\000\012\005\ufff1" +
    "\006\ufff1\007\ufff1\060\ufff1\001\002\000\012\005\ufff4\006" +
    "\ufff4\007\ufff4\060\144\001\002\000\006\050\161\056\151" +
    "\001\002\000\014\017\021\020\026\023\020\025\027\060" +
    "\023\001\002\000\004\055\163\001\002\000\012\005\ufff2" +
    "\006\ufff2\007\ufff2\060\ufff2\001\002\000\010\005\165\006" +
    "\ufffd\007\ufffd\001\002\000\004\060\265\001\002\000\004" +
    "\055\167\001\002\000\016\005\ufffb\006\ufffb\007\ufffb\021" +
    "\ufffb\022\ufffb\024\010\001\002\000\006\006\173\007\ufffe" +
    "\001\002\000\004\055\172\001\002\000\010\005\ufff0\006" +
    "\ufff0\007\ufff0\001\002\000\022\007\uffd0\010\203\014\200" +
    "\026\177\027\206\030\202\055\uffd0\060\207\001\002\000" +
    "\004\007\175\001\002\000\004\060\176\001\002\000\004" +
    "\055\uffee\001\002\000\044\031\034\032\054\033\030\034" +
    "\050\035\031\036\036\037\037\040\033\041\044\042\043" +
    "\043\053\044\032\045\035\046\040\051\257\060\041\061" +
    "\046\001\002\000\044\031\034\032\054\033\030\034\050" +
    "\035\031\036\036\037\037\040\033\041\044\042\043\043" +
    "\053\044\032\045\035\046\040\051\042\060\041\061\046" +
    "\001\002\000\012\007\uffd5\012\uffd5\013\uffd5\055\uffd5\001" +
    "\002\000\012\007\uffc1\012\uffc1\013\uffc1\055\uffc1\001\002" +
    "\000\044\031\034\032\054\033\030\034\050\035\031\036" +
    "\036\037\037\040\033\041\044\042\043\043\053\044\032" +
    "\045\035\046\040\051\042\060\041\061\046\001\002\000" +
    "\012\007\uffd1\012\uffd1\013\uffd1\055\uffd1\001\002\000\012" +
    "\007\uffd7\012\uffd7\013\uffd7\055\uffd7\001\002\000\044\031" +
    "\034\032\054\033\030\034\050\035\031\036\036\037\037" +
    "\040\033\041\044\042\043\043\053\044\032\045\035\046" +
    "\040\051\231\060\041\061\046\001\002\000\012\047\uff8c" +
    "\051\220\053\uff8c\057\uff8c\001\002\000\012\007\uffd4\012" +
    "\uffd4\013\uffd4\055\uffd4\001\002\000\012\007\uffd2\012\uffd2" +
    "\013\uffd2\055\uffd2\001\002\000\012\007\uffd3\012\uffd3\013" +
    "\uffd3\055\uffd3\001\002\000\006\007\uffff\055\214\001\002" +
    "\000\026\007\uffd0\010\203\012\uffd0\013\uffd0\014\200\026" +
    "\177\027\206\030\202\055\uffd0\060\207\001\002\000\012" +
    "\007\uffd6\012\uffd6\013\uffd6\055\uffd6\001\002\000\010\047" +
    "\227\053\123\057\124\001\002\000\012\007\uffc0\012\uffc0" +
    "\013\uffc0\055\uffc0\001\002\000\046\031\034\032\054\033" +
    "\030\034\050\035\031\036\036\037\037\040\033\041\044" +
    "\042\043\043\053\044\032\045\035\046\040\051\042\052" +
    "\221\060\041\061\046\001\002\000\012\007\uffbe\012\uffbe" +
    "\013\uffbe\055\uffbe\001\002\000\006\052\uffbd\056\uffbd\001" +
    "\002\000\006\052\225\056\224\001\002\000\044\031\034" +
    "\032\054\033\030\034\050\035\031\036\036\037\037\040" +
    "\033\041\044\042\043\043\053\044\032\045\035\046\040" +
    "\051\042\060\041\061\046\001\002\000\012\007\uffbf\012" +
    "\uffbf\013\uffbf\055\uffbf\001\002\000\006\052\uffbc\056\uffbc" +
    "\001\002\000\044\031\034\032\054\033\030\034\050\035" +
    "\031\036\036\037\037\040\033\041\044\042\043\043\053" +
    "\044\032\045\035\046\040\051\042\060\041\061\046\001" +
    "\002\000\012\007\uffbb\012\uffbb\013\uffbb\055\uffbb\001\002" +
    "\000\046\031\034\032\054\033\030\034\050\035\031\036" +
    "\036\037\037\040\033\041\044\042\043\043\053\044\032" +
    "\045\035\046\040\051\042\052\234\060\041\061\046\001" +
    "\002\000\004\052\233\001\002\000\012\007\uffc6\012\uffc6" +
    "\013\uffc6\055\uffc6\001\002\000\012\007\uffc4\012\uffc4\013" +
    "\uffc4\055\uffc4\001\002\000\014\007\uffc3\012\uffc3\013\uffc3" +
    "\052\236\055\uffc3\001\002\000\056\007\uffc2\012\uffc2\013" +
    "\uffc2\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\051\uff90\052\uff90\055\uffc2\060\uff90\061\uff90" +
    "\001\002\000\004\011\240\001\002\000\026\007\uffd0\010" +
    "\203\012\uffd0\013\uffd0\014\200\026\177\027\206\030\202" +
    "\055\uffd0\060\207\001\002\000\012\007\uffcc\012\uffcc\013" +
    "\uffcc\055\214\001\002\000\010\007\uffca\012\244\013\243" +
    "\001\002\000\022\007\uffd0\010\203\014\200\026\177\027" +
    "\206\030\202\055\uffd0\060\207\001\002\000\044\031\034" +
    "\032\054\033\030\034\050\035\031\036\036\037\037\040" +
    "\033\041\044\042\043\043\053\044\032\045\035\046\040" +
    "\051\042\060\041\061\046\001\002\000\004\007\246\001" +
    "\002\000\012\007\uffce\012\uffce\013\uffce\055\uffce\001\002" +
    "\000\004\011\250\001\002\000\026\007\uffd0\010\203\012" +
    "\uffd0\013\uffd0\014\200\026\177\027\206\030\202\055\uffd0" +
    "\060\207\001\002\000\012\007\uffcd\012\uffcd\013\uffcd\055" +
    "\214\001\002\000\006\007\uffcb\055\214\001\002\000\004" +
    "\015\254\001\002\000\022\007\uffd0\010\203\014\200\026" +
    "\177\027\206\030\202\055\uffd0\060\207\001\002\000\006" +
    "\007\256\055\214\001\002\000\012\007\uffcf\012\uffcf\013" +
    "\uffcf\055\uffcf\001\002\000\046\031\034\032\054\033\030" +
    "\034\050\035\031\036\036\037\037\040\033\041\044\042" +
    "\043\043\053\044\032\045\035\046\040\051\042\052\262" +
    "\060\041\061\046\001\002\000\004\052\261\001\002\000" +
    "\012\007\uffc8\012\uffc8\013\uffc8\055\uffc8\001\002\000\012" +
    "\007\uffc5\012\uffc5\013\uffc5\055\uffc5\001\002\000\014\007" +
    "\uffc7\012\uffc7\013\uffc7\052\264\055\uffc7\001\002\000\056" +
    "\007\uffc9\012\uffc9\013\uffc9\031\uff90\032\uff90\033\uff90\034" +
    "\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\uff90\051\uff90\052\uff90\055" +
    "\uffc9\060\uff90\061\uff90\001\002\000\006\051\267\055\uffea" +
    "\001\002\000\004\055\uffed\001\002\000\010\021\270\052" +
    "\271\060\uffdb\001\002\000\004\060\uffdc\001\002\000\004" +
    "\055\uffeb\001\002\000\006\052\uffe8\055\uffe8\001\002\000" +
    "\006\052\300\055\301\001\002\000\004\060\144\001\002" +
    "\000\006\050\276\056\151\001\002\000\014\017\021\020" +
    "\026\023\020\025\027\060\023\001\002\000\006\052\uffe7" +
    "\055\uffe7\001\002\000\004\055\uffec\001\002\000\006\021" +
    "\270\060\uffdb\001\002\000\006\052\uffe9\055\uffe9\001\002" +
    "\000\004\007\304\001\002\000\004\060\305\001\002\000" +
    "\004\057\306\001\002\000\004\002\001\001\002\000\016" +
    "\005\ufffc\006\ufffc\007\ufffc\021\ufffc\022\ufffc\060\310\001" +
    "\002\000\004\036\311\001\002\000\044\031\034\032\054" +
    "\033\030\034\050\035\031\036\036\037\037\040\033\041" +
    "\044\042\043\043\053\044\032\045\035\046\040\051\042" +
    "\060\041\061\046\001\002\000\004\055\313\001\002\000" +
    "\016\005\ufffa\006\ufffa\007\ufffa\021\ufffa\022\ufffa\060\ufffa" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\010\007\011" +
    "\001\001\000\004\012\306\001\001\000\004\003\302\001" +
    "\001\000\004\010\012\001\001\000\004\011\154\001\001" +
    "\000\004\013\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\035\021\036\024\040\023\001\001\000\010" +
    "\016\144\017\141\031\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\042\044\044\051\045" +
    "\050\046\054\047\046\001\001\000\004\047\137\001\001" +
    "\000\004\047\136\001\001\000\004\047\135\001\001\000" +
    "\012\044\134\045\050\046\054\047\046\001\001\000\010" +
    "\045\050\046\133\047\046\001\001\000\006\045\132\047" +
    "\046\001\001\000\012\044\131\045\050\046\054\047\046" +
    "\001\001\000\012\044\130\045\050\046\054\047\046\001" +
    "\001\000\004\047\127\001\001\000\004\050\121\001\001" +
    "\000\014\042\117\044\051\045\050\046\054\047\046\001" +
    "\001\000\012\044\116\045\050\046\054\047\046\001\001" +
    "\000\012\044\115\045\050\046\054\047\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\112\001\001\000\004\047\064\001\001\000\002\001" +
    "\001\000\012\044\075\045\050\046\054\047\046\001\001" +
    "\000\010\045\050\046\074\047\046\001\001\000\002\001" +
    "\001\000\006\045\073\047\046\001\001\000\006\045\072" +
    "\047\046\001\001\000\006\045\060\047\046\001\001\000" +
    "\004\047\064\001\001\000\004\047\071\001\001\000\004" +
    "\047\070\001\001\000\004\047\067\001\001\000\002\001" +
    "\001\000\004\047\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\064\001\001\000\004\047\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\044\111\045\050\046\054\047" +
    "\046\001\001\000\012\044\110\045\050\046\054\047\046" +
    "\001\001\000\012\044\107\045\050\046\054\047\046\001" +
    "\001\000\012\044\106\045\050\046\054\047\046\001\001" +
    "\000\012\044\105\045\050\046\054\047\046\001\001\000" +
    "\012\044\104\045\050\046\054\047\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\035\114\036\024\040\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\125\044" +
    "\051\045\050\046\054\047\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\147\031\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\035\152\036\024\040\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\163\001\001\000\004\014" +
    "\156\001\001\000\004\031\157\001\001\000\002\001\001" +
    "\000\010\035\161\036\024\040\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\167\006\170\007" +
    "\011\001\001\000\004\003\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\212\021\204\022\210\023" +
    "\211\026\207\027\200\030\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\257\044" +
    "\051\045\050\046\054\047\046\001\001\000\014\042\252" +
    "\044\051\045\050\046\054\047\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\042\236\044\051\045\050" +
    "\046\054\047\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\042\231\044\051\045\050\046\054\047\046" +
    "\001\001\000\006\041\216\050\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\214\022\210\023\211\026\207\027\200\030" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\042\221\043\222\044\051\045\050\046" +
    "\054\047\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\225\044\051\045\050\046" +
    "\054\047\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\042\227\044\051\045\050\046\054\047\046\001" +
    "\001\000\002\001\001\000\014\042\234\044\051\045\050" +
    "\046\054\047\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\240\021\204\022\210\023" +
    "\211\026\207\027\200\030\203\001\001\000\004\025\241" +
    "\001\001\000\004\024\244\001\001\000\020\020\251\021" +
    "\204\022\210\023\211\026\207\027\200\030\203\001\001" +
    "\000\014\042\246\044\051\045\050\046\054\047\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\250\021\204\022\210\023\211\026\207\027" +
    "\200\030\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\254\021\204\022\210\023" +
    "\211\026\207\027\200\030\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\262\044\051\045\050\046" +
    "\054\047\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\265\001\001\000\002\001\001\000\010\015\273" +
    "\034\271\037\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\274" +
    "\001\001\000\002\001\001\000\010\035\276\036\024\040" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\273\034\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\311\044" +
    "\051\045\050\046\054\047\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
	graph = new CallGraph();
	IdentifierVector= new Vector<String>();
	typeMap = new HashMap();
	a = new Vector<Vector<String>>();
	b = new Vector<Vector<String>>();
	c = new Vector<String>();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	return getScanner().next_token(); 

    }


	public CallGraph graph;
	public Vector<String> IdentifierVector;
	public Map typeMap;
	public Vector<Vector<String>> a;
	public Vector<Vector<String>> b;
	public Vector<String> c;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // moduleBlock ::= MODULE IDENTIFIER SEMI declarations begin_block END IDENTIFIER DOT 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	for (int i = 0; i < a.size(); i++) {
		for (int j = 0; j < a.elementAt(i).size(); j++){
			parser.graph.addCallSite(c.elementAt(i) + (j + 1), 
				c.elementAt(i) + "()", 
				a.elementAt(i).elementAt(j) + b.elementAt(i).elementAt(j));
			parser.graph.addEdge(c.elementAt(i) + (j + 1), a.elementAt(i).elementAt(j));
		}
	}
	parser.graph.show();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moduleBlock",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= moduleBlock EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin_block ::= BEGIN statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= const_declare type_declare var_declare procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_declare ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_list ::= const_list IDENTIFIER EQUAL expression SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declare ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_list ::= type_list IDENTIFIER EQUAL type SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_declare ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_list ::= var_list identifier_list COLON type SEMI 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	for (int i = 0; i < IdentifierVector.size(); i++){
		typeMap.put(IdentifierVector.elementAt(i), t.toString());
	}
	IdentifierVector.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedure_declaration ::= procedure_declaration procedure_heading SEMI procedure_body SEMI 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (id1.toString().equals(id2.toString()) == false)
		throw new ParameterMismatchedException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedure_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_body ::= declarations begin_block END IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = id;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = id;
	parser.graph.addProcedure(id, id + "(" + fp.toString() + ")");
	c.addElement(id.toString());
	a.addElement(new Vector<String>());
	b.addElement(new Vector<String>());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formal_parameters ::= LPAREN fp_section_list RPAREN 
            {
              String RESULT =null;
		int fp_s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fp_s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fp_s_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = fp_s_l.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_parameters ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
	RESULT = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_parameters ::= 
            {
              String RESULT =null;
		
	RESULT = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fp_section_list ::= fp_section_list SEMI fp_section 
            {
              String RESULT =null;
		int fp_s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fp_s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fp_s_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fp_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fp_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp_s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = fp_s_l.toString() + ", " + fp_s.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fp_section_list ::= fp_section 
            {
              String RESULT =null;
		int fp_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fp_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp_s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = fp_s.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fp_section ::= var_if identifier_list COLON type 
            {
              String RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = "";
	String temp = t.toString();
	for (int i = 0; i < id_list.intValue(); i++) {
		RESULT += temp;
		if (i != id_list.intValue() - 1) 
			RESULT += ", ";
	}
	IdentifierVector.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = id.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= array_type 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = at.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= record_type 
            {
              String RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = rt.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INTEGER 
            {
              String RESULT =null;
		
	RESULT = "INTEGER";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BOOLEAN 
            {
              String RESULT =null;
		
	RESULT = "BOOLEAN";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // record_type ::= RECORD field_list END 
            {
              String RESULT =null;
		
	RESULT = "RECORD";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field_list ::= field_list SEMI field_one 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_list ::= field_one 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_one ::= identifier_list COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_one ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_if ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // array_type ::= ARRAY expression OF type 
            {
              String RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t.toString() + "[" + ex.toString() + "]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identifier_list ::= IDENTIFIER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	IdentifierVector.addElement(id.toString());
	RESULT = new Integer(1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              Integer RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	IdentifierVector.addElement(id.toString());
	RESULT = id_list.intValue() + 1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_sequence ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_sequence ::= statement_sequence SEMI statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= procedure_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= readORwrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elsif_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_statement ::= ELSE statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // readORwrite ::= READ LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // readORwrite ::= READ expression RPAREN 
            {
              Object RESULT =null;
			
	if (true) 
		throw new MissingLeftParenthesisException();	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // readORwrite ::= READ LPAREN expression 
            {
              Object RESULT =null;
			
	if (true) 
		throw new MissingRightParenthesisException();	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // readORwrite ::= WRITE expression RPAREN 
            {
              Object RESULT =null;
			
	if (true) 
		throw new MissingLeftParenthesisException();	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // readORwrite ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;
		
	if (true) 
		throw new MissingOperatorException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // readORwrite ::= WRITE LPAREN RPAREN 
            {
              Object RESULT =null;
		
	if (true) 
		throw new MissingOperatorException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // readORwrite ::= WRITE LPAREN expression 
            {
              Object RESULT =null;
			
	if (true) 
		throw new MissingRightParenthesisException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // readORwrite ::= WRITE LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // readORwrite ::= WRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readORwrite",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	a.elementAt(a.size() - 1).addElement(id.toString());
	b.elementAt(b.size() - 1).addElement(ap.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actual_parameters ::= LPAREN expression_list RPAREN 
            {
              String RESULT =null;
		int ex_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ex_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ex_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = "(" + ex_l.toString() + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // actual_parameters ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
	RESULT = "()";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_list ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = e.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_list ::= expression_list COMMA expression 
            {
              String RESULT =null;
		int ex_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ex_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ex_l.toString() + "," + e.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (typeMap.get(id.toString()).equals("BOOLEAN")) {
		if (typeMap.get(e.toString()) == null) {
			throw new TypeMismatchedException();
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= simple_expression EQUAL simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = se1.toString() + " = " + se2.toString();
	typeMap.put(se1.toString() + " = " + se2.toString(), "BOOLEAN");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= simple_expression EQUAL 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= EQUAL simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= simple_expression NOTEQUAL simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = se1.toString() + " # " + se2.toString();
	typeMap.put(se1.toString() + " # " + se2.toString(), "BOOLEAN");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= simple_expression NOTEQUAL 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= NOTEQUAL simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= simple_expression LE simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = se1.toString() + " <= " + se2.toString();
	typeMap.put(se1.toString() + " <= " + se2.toString(), "BOOLEAN");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= simple_expression LE 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= LE simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= simple_expression LT simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = se1.toString() + " < " + se2.toString();
	typeMap.put(se1.toString() + " < " + se2.toString(), "BOOLEAN");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= simple_expression LT 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= LT simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= simple_expression GE simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = se1.toString() + " >= " + se2.toString();
	typeMap.put(se1.toString() + " >= " + se2.toString(), "BOOLEAN");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= simple_expression GE 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= GE simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= simple_expression GT simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = se1.toString() + " > " + se2.toString();
	typeMap.put(se1.toString() + " > " + se2.toString(), "BOOLEAN");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= simple_expression GT 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= GT simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = se1.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_expression ::= term_list 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t_l.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_expression ::= PLUS term_list 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t_l.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_expression ::= MINUS term_list 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = "-" + t_l.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // term_list ::= term_list PLUS term 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t_l.toString() + " + " + t.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // term_list ::= term_list PLUS 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // term_list ::= term_list MINUS term 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t_l.toString() + " - " + t.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // term_list ::= term_list MINUS 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true)
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term_list ::= term_list OR term 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t_l.toString() + " OR " + t.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // term_list ::= term_list OR 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // term_list ::= OR term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // term_list ::= term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // term ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = f.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // term ::= term TIMES factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t.toString() +  " * " + f.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // term ::= TIMES factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= term DIVIDE factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t.toString() +  " DIV " + f.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // term ::= DIVIDE factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // term ::= term MOD factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t.toString() +  " MOD " + f.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // term ::= MOD factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // term ::= term AND factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t.toString() +  " & " + f.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // term ::= AND factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperandException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term ::= term factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (true) 
		throw new MissingOperatorException();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= IDENTIFIER selector 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = id.toString() + se.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = n.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= LPAREN expression RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = e.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor ::= NOT factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = "~" + f.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // selector ::= selector DOT IDENTIFIER 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = se.toString() + "." + id.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // selector ::= selector LBRACKET expression RBRACKET 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = se.toString() + "["+ e.toString() +"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // selector ::= 
            {
              String RESULT =null;
		
	RESULT = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
